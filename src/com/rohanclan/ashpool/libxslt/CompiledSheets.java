/*
 * Copyright (c) 2003 Rob Rohan
 *  
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is 
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE.
 * 
 */
package com.rohanclan.ashpool.libxslt;
 
public class CompiledSheets {
	
	private CompiledSheets(){;}
	
	/** finds defined columns in a table schema mostly used
		for inserts */
	public static final String sheetGetColumnNamesSchema = 
		 "<?xml version=\"1.0\" encoding=\"utf-8\"?> "
		+"<xsl:stylesheet version=\"1.0\" "
		+"    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" "
		+"    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" "
		+"    exclude-result-prefixes=\"xs\" "
		+">"
		+"    <xsl:output method=\"xml\" indent=\"no\" encoding=\"utf-8\"/> "
		
		+"    <xsl:param name=\"tablename\" select=\"'emptytablename'\"/> "
		+"    <xsl:param name=\"schemaname\" select=\"'emptyschemaname'\"/> "
		+"    <xsl:param name=\"defdatatype\" select=\"'12'\"/> "
		
		+"    <xsl:template match=\"/\"> "
		+"    <t>"
		+"        <xsl:apply-templates /> "
		+"    </t> "
		+"    </xsl:template> "
		
		+"    <xsl:template match=\"/xs:schema/xs:complexType/xs:sequence/xs:element\"> "
		+"    <r>"
		+"        <xsl:element name=\"COLUMN_NAME\"> "
		+"            <xsl:value-of select=\"@name\" /> "
		+"        </xsl:element> "
		
		+"        <xsl:element name=\"TABLE_SCHEM\"> "
		+"            <xsl:value-of select=\"$schemaname\"/>"
		+"        </xsl:element>"
		+"        <xsl:element name=\"TABLE_NAME\">"
		+"            <xsl:value-of select=\"$tablename\"/>"
		+"        </xsl:element>"
		+"        <xsl:element name=\"DATA_TYPE\">"
		+"            <xsl:call-template name=\"typeLookup\">"
		+"                <xsl:with-param name=\"type\" select=\"substring-after(@type,':')\"/>"
		+"            </xsl:call-template>"
		+"        </xsl:element>"
		+"        <xsl:element name=\"TYPE_NAME\">"
		+"            <xsl:value-of select=\"@type\" />"
		+"        </xsl:element>"
		+"        <xsl:element name=\"COLUMN_SIZE\">"
		+"            <xsl:value-of select=\"@maxLength\" />"
		+"        </xsl:element>"
		+"        <xsl:element name=\"BUFFER_LENGTH\"/>"
		+"        <xsl:element name=\"DECIMAL_DIGITS\"/>"
		+"        <xsl:element name=\"NUM_PREC_RADIX\"/>"
		+"        <xsl:element name=\"NULLABLE\">"
		+"            <xsl:variable name=\"tf\" select=\"@nillable\"/>"
		+"            <xsl:choose>"
		+"                <xsl:when test=\"$tf = 'true'\">1</xsl:when>"
		+"                <xsl:otherwise>0</xsl:otherwise> "
		+"            </xsl:choose>"
		+"        </xsl:element>"
		+"        <xsl:element name=\"REMARKS\">"
		+"            <xsl:value-of select=\"/xs:schema/xs:element/xs:annotation/xs:documentation\"/>"
		+"        </xsl:element>"
		+"        <xsl:element name=\"COLUMN_DEF\">"
		+"            <xsl:value-of select=\"@default\"/>"
		+"        </xsl:element>"
		+"        <xsl:element name=\"SQL_DATA_TYPE\"/>"
		+"        <xsl:element name=\"SQL_DATETIME_SUB\"/>"
		+"        <xsl:element name=\"CHAR_OCTET_LENGTH\"/>"
		+"        <xsl:element name=\"ORDINAL_POSITION\">1</xsl:element>"
		+"        <xsl:element name=\"IS_NULLABLE\">"
		+"            <xsl:variable name=\"tf\" select=\"@nillable\"/>"
		+"            <xsl:choose>"
		+"                <xsl:when test=\"$tf = 'true'\">YES</xsl:when>"
		+"                <xsl:otherwise>NO</xsl:otherwise>			"
		+"            </xsl:choose>"
		+"        </xsl:element>"
		+"        <xsl:element name=\"SCOPE_CATLOG\"/>"
		+"        <xsl:element name=\"SCOPE_SCHEMA\"/>"
		+"        <xsl:element name=\"SCOPE_TABLE\"/>"
		+"        <xsl:element name=\"SOURCE_DATA_TYPE\"/>"
		+"        <xsl:element name=\"AUTO_NUMBER\">"
		+"            <xsl:variable name=\"an\" select=\"@autonumber\"/>"
		+"            <xsl:choose>"
		+"                <xsl:when test=\"$an = 'true'\">YES</xsl:when>"
		+"                <xsl:otherwise>NO</xsl:otherwise>			"
		+"            </xsl:choose>"
		+"        </xsl:element>"
		+"    </r>"
		+"    </xsl:template>"
		
		+"    <xsl:template name=\"typeLookup\">"
		+"        <xsl:param name=\"type\" select=\"'string'\"/>"
		+"        <xsl:choose>"
		+"            <xsl:when test=\"$type = 'integer'\">4</xsl:when>"
		+"            <xsl:when test=\"$type = 'string'\">12</xsl:when>"
		+"            <xsl:when test=\"$type = 'boolean'\">16</xsl:when>"
		+"            <xsl:when test=\"$type = 'decimal'\">3</xsl:when>"
		+"            <xsl:when test=\"$type = 'float'\">6</xsl:when>"
		+"            <xsl:when test=\"$type = 'double'\">8</xsl:when>"
		+"            <xsl:when test=\"$type = 'dateTime'\">93</xsl:when>"
		+"            <xsl:when test=\"$type = 'time'\">92</xsl:when>"
		+"            <xsl:when test=\"$type = 'date'\">91</xsl:when>"
		+"            <xsl:when test=\"$type = 'hexBinary'\">-1</xsl:when>"
		+"            <xsl:when test=\"$type = 'base64Binary'\">-1</xsl:when>"
		+"            <xsl:otherwise>12</xsl:otherwise>"
		+"        </xsl:choose>"
		+"    </xsl:template>"
		+"    <xsl:template match=\"text()\" />"
		+"</xsl:stylesheet>";
	
	/** gets a resultset ready list of columns from an xml
			document in table form. The first 'rows' column 
			names.*/
	public static final String sheetGetColumnNames = 
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
		+"<xsl:stylesheet version=\"1.0\""
		+"    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\""
		+">"
		+"<xsl:output method=\"xml\" indent=\"no\" encoding=\"utf-8\"/>"
		
		+"    <xsl:param name=\"tablename\" select=\"'emptytablename'\"/>"
		+"    <xsl:param name=\"defdatatype\" select=\"'12'\"/>"
		+"    "
		+"    <xsl:template match=\"/\">"
		+"    <t>"
		+"        <xsl:apply-templates select=\"*/*[1]\"/>"
		+"    </t>"
		+"    </xsl:template>"
		
		+"    <xsl:template match=\"*/*\">"
		+"    <xsl:call-template name=\"collist\">"
		+"        <xsl:with-param name=\"row\" select=\"./*\"/>"
		+"    </xsl:call-template>"
		+"    </xsl:template>"
		
		+"    <xsl:template name=\"collist\">"
		+"        <xsl:param name=\"row\" select=\"''\"/>"
		+"        <xsl:for-each select=\"$row\">"
		+"        <r>	"
		+"            <xsl:variable name=\"nodename\" select=\"name()\"/>"
		+"            <xsl:variable name=\"curpos\" select=\"position()\"/>"
		+"            <xsl:element name=\"COLUMN_NAME\">"
		+"                <xsl:value-of select=\"$nodename\"/>"
		+"            </xsl:element>"
		
		+"            <xsl:element name=\"TABLE_SCHEM\"/>"
		+"            <xsl:element name=\"TABLE_NAME\">"
		+"                <xsl:value-of select=\"$tablename\"/>"
		+"            </xsl:element>"
		+"            <xsl:element name=\"DATA_TYPE\">"
		+"                <xsl:value-of select=\"$defdatatype\"/>"
		+"            </xsl:element>"
		+"            <xsl:element name=\"TYPE_NAME\">string</xsl:element>"
		+"            <xsl:element name=\"COLUMN_SIZE\"/>"
		+"            <xsl:element name=\"BUFFER_LENGTH\"/>"
		+"            <xsl:element name=\"DECIMAL_DIGITS\"/>"
		+"            <xsl:element name=\"NUM_PREC_RADIX\"/>"
		+"            <xsl:element name=\"NULLABLE\">1</xsl:element>"
		+"            <xsl:element name=\"REMARKS\">NO SCHEMA</xsl:element>"
		+"            <xsl:element name=\"COLUMN_DEF\"/>"
		+"            <xsl:element name=\"SQL_DATA_TYPE\"/>"
		+"            <xsl:element name=\"SQL_DATETIME_SUB\"/>"
		+"            <xsl:element name=\"CHAR_OCTET_LENGTH\"/>"
		+"            <xsl:element name=\"ORDINAL_POSITION\">1</xsl:element>"
		+"            <xsl:element name=\"IS_NULLABLE\">YES</xsl:element>"
		+"            <xsl:element name=\"SCOPE_CATLOG\"/>"
		+"            <xsl:element name=\"SCOPE_SCHEMA\"/>"
		+"            <xsl:element name=\"SCOPE_TABLE\"/>"
		+"            <xsl:element name=\"SOURCE_DATA_TYPE\"/>"
		+"            <xsl:element name=\"AUTO_NUMBER\">NO</xsl:element>"
		+"        </r>"
		+"        </xsl:for-each>"
		
		+"    </xsl:template>"
		
		+"    <xsl:template match=\"text()\"/>"
		+"</xsl:stylesheet>";
		
	/** Removes all the duplicates from a node set. Used for much
	of the aggregate functions, and for the distinct keyword.
	NOTE: this process addes another sweep on a result */
	public static final String sheetDoDistinct =
			  "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
		+" <xsl:stylesheet version=\"2.0\" "
		+"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\""
		+"  xmlns:set=\"http://exslt.org/sets\""
		+"  extension-element-prefixes=\"set\""
		+"  >"
		+"  <xsl:output method=\"xml\" indent=\"no\" encoding=\"UTF-8\"/>"
		+"   <xsl:template match=\"/\">"
		+"    <xsl:variable name=\"tname\">"
		+"    <xsl:value-of select=\"name(/*)\"/>"
		+"    </xsl:variable>"
		+"     <xsl:element name=\"{$tname}\">"
		+"   <xsl:apply-templates select=\"set:distinct(*/*)\"/>"
		+"   </xsl:element>"
		+"   </xsl:template>"
		+"  <xsl:template match=\"*/*\">"
		+"    <xsl:copy-of select=\".\"/>"
		+"   </xsl:template>"
		+"   <xsl:template match=\"text()\"/>"
		+" </xsl:stylesheet>";
		
		
	/** gets the top level node name from a table. Meaning
	the root nodes name. */
	public static final String sheetGetTableRootNode = 
		"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
		+"<xsl:stylesheet version=\"1.0\" "
		+"xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\""
		+">"
		+"<xsl:output method=\"text\" indent=\"no\" encoding=\"utf-8\"/>"
		+"<xsl:template match=\"/\"><xsl:value-of select=\"name(./*[1])\"/></xsl:template>"
		+"</xsl:stylesheet>";
		
		
	/** gets a tables row marking node. Meaning what
	the xml doc uses to mark 2nd level roots */
	public static final String sheetGetTableRowNode =
		"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
		+"<xsl:stylesheet version=\"1.0\" "
		+"	xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\""
		+">"
		+"<xsl:output method=\"text\" indent=\"no\" encoding=\"utf-8\"/>"
		+"	<xsl:template match=\"/\"><xsl:value-of select=\"name(./*/*[1])\"/></xsl:template>"
		+"</xsl:stylesheet>";
	
	public static final String sheetDoJoin = "<?xml version=\"1.0\" ?>"
+" 		<!--\""
+" 			Author: Rob Rohan\""
+" 			File: doJoin.xsl\""
+" 			Date: 2003.02.27\""
+" 			Purpose: joins two Ashpool xml tables (documents) into one document\""
+" 				that is in the proper format to go through XMLtoResultSetFilter\""
+" 				\""
+" 				This process assumes that t1 and t2 are already limited/sorted/etc\""
+" 				datastore : path to the datastore\""
+" 				j1        : join field 1 - the from column\""
+" 				j2        : join field 2 - the to column\""
+" 				t1        : table 1\""
+" 				t2        : table 2 can be a ~ or # file\""
+" 				type      : join type 'inner' or 'outer'\""
+" 				dir       : join direction (not implemented 'left' or 'right')\""
+" 		-->"
+" 		<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">"
+" 			<xsl:output method=\"xml\" indent=\"yes\" />"
+" 			"
+" 			<xsl:param name=\"datastore\" select=\"'file:///mnt/fileserver/projects/Ashpool/10minutes'\"/>"
+" 			<xsl:param name=\"j1\" select=\"'vend_id'\"/>"
+" 			<xsl:param name=\"j2\" select=\"'vend_id'\"/>"
+" 			<xsl:param name=\"t1\" select=\"'Vendors'\"/>"
+" 			<xsl:param name=\"t2\" select=\"'Products'\"/>"
+" 			<xsl:param name=\"type\" select=\"'outer'\"/>"
+" 			<xsl:param name=\"dir\" select=\"'left'\"/>"
+" 			"
+" 			<!-- if filtered and sorted before hand this should just work... I think... :) -->"
+" 			<xsl:variable name=\"a\" select=\"document(concat($datastore,'/',$t1,'.xml'))/*/*\"/>"
+" 			<xsl:variable name=\"b\" select=\"document(concat($datastore,'/',$t2,'.xml'))/*/*\"/>"
+" 			"
+" 			<xsl:template match=\"/\">"
+" 			<t>"
+" 			<xsl:choose>"
+" 				<xsl:when test=\"$type = 'inner'\">"
+" 				"
+" 				<!-- inner join, make sure we have something to join to -->"
+" 				<xsl:choose>"
+" 					<xsl:when test=\"count($b) &gt; 0\">"
+" 					<xsl:comment> = inner join = </xsl:comment>"
+" 					<!-- for every node in the first table -->"
+" 					<xsl:for-each select=\"$a\">"
+" 						<xsl:variable name=\"pos\" select=\"position()\"/>"
+" 						<!-- get one 'row' -->"
+" 						<xsl:variable name=\"alResults\" select=\"$a[$pos]/*\"/>"
+" 						<!-- get the value of the join from -->"
+" 						<xsl:variable name=\"joiner0\" select=\"$a[$pos]/*[name() = $j1]\"/>"
+" 						<!-- get the first result set in table 2 that matches the join from value -->"
+" 						<xsl:variable name=\"blResults\" select=\"$b[./*[name() = $j2] = $joiner0][1]/*\"/>"
+" 						"
+" 						<!-- if both fragments have nodes (inner join) -->"
+" 						<xsl:if test=\"count($alResults) &gt; 0 and count($blResults) &gt; 0\">"
+" 						<r>"
+" 							<xsl:copy-of select=\"$alResults\"/>"
+" 							<xsl:copy-of select=\"$blResults\"/>"
+" 						</r>"
+" 						</xsl:if>"
+" 						"
+" 					</xsl:for-each>"
+" 					</xsl:when>"
+" 					<!-- there is nothing in table 2 to join with -->"
+" 					<xsl:otherwise>"
+" 						<xsl:copy-of select=\"$a\"/>"
+" 					</xsl:otherwise>"
+" 				</xsl:choose>"
+" 				</xsl:when>"
+" 				"
+" 				<xsl:when test=\"$type = 'outer'\">"
+" 				<!-- outer join -->"
+" 				<xsl:comment> = outer join model = </xsl:comment>"
+" 					<xsl:for-each select=\"$a\">"
+" 						<xsl:variable name=\"pos\" select=\"position()\"/>"
+" 						<!-- get one 'row' -->"
+" 						<xsl:variable name=\"arResults\" select=\"$a[$pos]/*\"/>"
+" 						<!-- get the value of the join from -->"
+" 						<xsl:variable name=\"joiner0\" select=\"$a[$pos]/*[name() = $j1]\"/>"
+" 						"
+" 						<xsl:call-template name=\"doOuterJoin\">"
+" 							<xsl:with-param name=\"join_row_count\" select=\"count($b[./*[name() = $j2] = $joiner0])\"/>"
+" 							<xsl:with-param name=\"arResults\" select=\"$arResults\"/>"
+" 							<xsl:with-param name=\"joiner0\" select=\"$joiner0\"/>"
+"	 						<xsl:with-param name=\"current_row\" select=\"1\"/>"
+" 						</xsl:call-template>"
+" 					</xsl:for-each>"
+" 				</xsl:when>"
+" 				"
+" 				<!-- bad type -->"
+" 				<xsl:otherwise>"
+" 					<xsl:message terminate=\"yes\">"
+" 					doJoin exception: unknown 'type' parameter. Valid types are 'inner' or 'outer'"
+" 					</xsl:message>"
+" 				</xsl:otherwise>"
+" 			</xsl:choose>"
+" 			</t>"
+" 			</xsl:template>"
+" 			"
+" 			<xsl:template name=\"doOuterJoin\">"
+" 				<xsl:param name=\"join_row_count\" select=\"0\"/>"
+" 				<xsl:param name=\"arResults\" select=\"''\"/>"
+" 				<xsl:param name=\"current_row\" select=\"1\"/>"
+" 				<xsl:param name=\"joiner0\" select=\"''\"/>"
+" 				"
+" 				<xsl:variable name=\"brResults\" select=\"$b[./*[name() = $j2] = $joiner0][$current_row]/*\"/>"
+" 				"
+" 				<xsl:if test=\"$arResults[$joiner0][1] != ''\">"
+" 				<r>"
+" 				<!-- all of this row from table 1 -->"
+" 				<xsl:copy-of select=\"$arResults\"/>"
+" 				<xsl:choose>"
+" 					<!-- if there is a matching table 1 record show it\""
+" 						otherwise get a blank copy of the first 'row'\""
+" 					-->"
+" 					<xsl:when test=\"count($brResults) &gt; 0\">"
+" 						<xsl:copy-of select=\"$brResults\"/>"
+" 					</xsl:when>"
+" 					<xsl:otherwise>"
+" 						<xsl:call-template name=\"padColumns\">"
+" 							<xsl:with-param name=\"examplecol\" select=\"$b[1]/*\"/>"
+" 						</xsl:call-template>"
+" 					</xsl:otherwise>"
+" 					</xsl:choose>"
+" 				</r>"
+" 				</xsl:if>"
+" 				"
+" 				<!-- recall this template if current_row less then count -->"
+" 				<xsl:if test=\"number($current_row) &lt; number($join_row_count)\">"
+" 					<xsl:call-template name=\"doOuterJoin\">"
+" 						<xsl:with-param name=\"join_row_count\" select=\"$join_row_count\"/>"
+" 						<xsl:with-param name=\"arResults\" select=\"$arResults\"/>"
+" 						<xsl:with-param name=\"joiner0\" select=\"$joiner0\"/>"
+" 						<xsl:with-param name=\"current_row\" select=\"$current_row + 1\"/>"
+" 					</xsl:call-template>"
+" 				</xsl:if>"
+" 			</xsl:template>"
+" 			"
+" 			"
+" 			<!-- make an empty group of columns -->"
+" 			<xsl:template name=\"padColumns\">"
+" 				<xsl:param name=\"examplecol\" select=\"''\"/>"
+" 				"
+" 				<xsl:for-each select=\"$examplecol\">"
+" 					<xsl:variable name=\"pos\" select=\"position()\"/>"
+" 					<xsl:variable name=\"newname\" select=\"name($examplecol[$pos])\"/>"
+" 					<xsl:element name=\"{$newname}\"/>"
+" 				</xsl:for-each>"
+" 			</xsl:template>"
+" 		</xsl:stylesheet>";
	
}
